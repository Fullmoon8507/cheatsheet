****************************************************************************************************
* 基本
****************************************************************************************************
【プリミティブ型とラッパークラス】
|----------------+----------------+----------+----------------+--------------------------------------------+-----------------|
| プリミティブ型 | ラッパークラス | ビット数 | 範囲           | 値                                         | 備考            |
|----------------+----------------+----------+----------------+--------------------------------------------+-----------------|
| byte           | Byte           | 8bit     | -2^7 ~ 2^7-1   | -128 ~ 127                                 | 符号付き整数    |
| short          | Short          | 16bit    | -2^15 ~ 2^15-1 | -32768 ~ 32767                             | 符号付き整数    |
| int            | Integer        | 32bit    | -2^31 ~ 2^31-1 | -2147483648 ~ 2147483647                   | 符号付き整数    |
| long           | Long           | 64bit    | -2^63 ~ 2^63-1 | -9223372036854775808 ~ 9223372036854775807 | 符号付き整数    |
|----------------+----------------+----------+----------------+--------------------------------------------+-----------------|
| boolean        | Boolean        | 1bit     | -              | -                                          | true or false   |
| char           | Character      | 16bit    | -              | 0 ~ 65535                                  | Unicodeの一文字 |
|----------------+----------------+----------+----------------+--------------------------------------------+-----------------|
| float          | Float          | 32bit    | -              | 1.4E-45 ~ 3.4028235E38                     | 浮動小数点数    |
| double         | Double         | 64bit    | -              | 4.9E-324 ~ 1.7976931348623157E308          | 浮動小数点数    |
|----------------+----------------+----------+----------------+--------------------------------------------+-----------------|

【アクセス修飾子】
|----------------+------------------------------------------------------|
| アクセス修飾子 | 内容                                                 |
|----------------+------------------------------------------------------|
| public         | すべてのクラスからアクセス可能                       |
| protected      | 現在のクラスとサブクラスからアクセス可能             |
| なし           | 現在のクラスと同じパッケージのクラスからアクセス可能 |
| private        | 現在のクラスからのみアクセス可能                     |
|----------------+------------------------------------------------------|

【リテラル】
|----------------------+----------+-------+---------+------------|
| リテラル             | 種類     | 表現  | 例      | 備考       |
|----------------------+----------+-------+---------+------------|
| 整数型リテラル       | int型    | -     | 1234    |            |
|                      | long型   | L     | 1234L   |            |
|                      | 2進数    | 0b    | 0b1111  | 10進数で15 |
|                      | 8進数    | 0     | 011     | 10進数で9  |
|                      | 16進数   | 0x    | 0x11    | 10進数で17 |
|----------------------+----------+-------+---------+------------|
| 浮動小数点型リテラル | double型 | -     | 3.14    |            |
|                      | float型  | F     | 3.14F   |            |
|----------------------+----------+-------+---------+------------|
| 文字型リテラル       | char型   | 'x'   | 'A'     |            |
|----------------------+----------+-------+---------+------------|
| 文字列型リテラル     | String型 | "xxx" | "Hello" |            |
|----------------------+----------+-------+---------+------------|

【リテラル内でのアンダーバー】
|---------------------------------------------+----------------|
| ルール                                      | 例             |
|---------------------------------------------+----------------|
| 数値の途中でアンダースコア(_)を使用可能     | 123_456        |
| アンダーバー(_)はリテラルの先頭と末尾はだめ | ×：_123, 123_ |
| アンダーバー(_)は記号の前後はだめ           | ×：3_.14      |
|---------------------------------------------+----------------|

【変数名のルール】
|--------------------------------------+----------------+------------------|
| ルール                               | 例             | 備考             |
|--------------------------------------+----------------+------------------|
| Unicodeに含まれる文字が使用できる    | sum, 合計      | 日本語も使用可能 |
| 記号はアンダーバー(_)と$のみ使用可能 | result_2020_06 |                  |
| 数字から初めてはいけない             | ×：1x         |                  |
| 一文字目に数字は使用できない         | ×：7name      |                  |
|--------------------------------------+----------------+------------------|

【型推論】※Java SE10より
|------------------------+----------------------------+--------------------------------------------|
| ルール                 | 例                         | 備考                                       |
|------------------------+----------------------------+--------------------------------------------|
| var (変数名)           | var a = 10;                |                                            |
|                        | var a = new ArrayList<>(); | ジェネリクスの指定がない場合はObjectとなる |
|------------------------+----------------------------+--------------------------------------------|
| 必ず初期化する         | ×：a;                     | 型を推論できないため、エラー               |
| nullはだめ             | ×：a = null;              | 型を推論できないため、エラー               |
| ラムダはだめ           | ×：a = () -> {};          | 型を推論できないため、エラー               |
| 配列の初期化式はだめ   | ×：a = {1,2,3};           | 型を推論できないため、エラー               |
| 引数の型宣言はだめ     |                            |                                            |
| フィールドの宣言はだめ |                            |                                            |
|------------------------+----------------------------+--------------------------------------------|

【関数型インターフェース】※Java SE8より
|------------------------+-----------------+------+--------------|
| 関数型インターフェース | メソッド        | 引数 | 結果         |
|------------------------+-----------------+------+--------------|
| Consumer<T>            | void accept(T)  | ◯   | ×           |
| Supplier<T>            | T get()         | ×   | ◯           |
| Predicate<T>           | boolean test(T) | ◯   | ◯ ※boolean |
| Function<T,R>          | R apply(T)      | ◯   | ◯           |
|------------------------+-----------------+------+--------------|

****************************************************************************************************
* クラス
****************************************************************************************************
【String型の代表的なインスタントメソッド】
|----------------------------------------------+----------+------------------------------------------------------------------------+------------------------------------|
| メソッド名                                   | リターン | 処理内容                                                               | 備考                               |
|----------------------------------------------+----------+------------------------------------------------------------------------+------------------------------------|
| charAt(int index)                            | char     | indexの位置のchar値を返す                                              |                                    |
|----------------------------------------------+----------+------------------------------------------------------------------------+------------------------------------|
| replaceAll(String regex, String replacement) | String   | regexに該当する箇所をreplacementに置き換える                           | インスタンスの内容は書き換わらない |
|----------------------------------------------+----------+------------------------------------------------------------------------+------------------------------------|
| indexOf(int ch)                              | int      | chが最初に出現する位置のインデックスを返す                             | 文字がない場合は-1を返す           |
| indexOf(String str)                          | int      | strが最初に出現する位置のインデックスを返す                            |                                    |
| indexOf(int ch, int fromIndex)               | int      | fromIndexから検索を開始し、chが最初に出現する位置のインデックスを返す  |                                    |
| indexOf(String str, int fromIndex)           | int      | fromIndexから検索を開始し、strが最初に出現する位置のインデックスを返す |                                    |
|----------------------------------------------+----------+------------------------------------------------------------------------+------------------------------------|
| startsWith(String prefix)                    | boolean  | prefixで始まるか判定                                                   |                                    |
| startsWith(String prefix, int toffset)       | boolean  | toffset以降の部分文字列に対して、prefixで始まるか判定                  |                                    |
| endsWith(String suffix)                      | boolean  | suffixで終わるか判定                                                   |                                    |
|----------------------------------------------+----------+------------------------------------------------------------------------+------------------------------------|

【StringBuilder型の代表的なインスタントメソッド】
|-----------------------------------------+---------------+------------------------------------------------------------------------+------------------------------------------------|
| メソッド名                              | リターン      | 処理内容                                                               | 備考                                           |
|-----------------------------------------+---------------+------------------------------------------------------------------------+------------------------------------------------|
| reverse()                               | StringBuilder | 文字列を逆順にして置き換える                                           |                                                |
|-----------------------------------------+---------------+------------------------------------------------------------------------+------------------------------------------------|
| replace(int start, int end, String str) | StringBuilder | startインデックス〜endインデックスの範囲内をstrに置き換える            |                                                |
|-----------------------------------------+---------------+------------------------------------------------------------------------+------------------------------------------------|
| indexOf(String str)                     | int           | strが最初に出現する位置のインデックスを返す                            | 文字がない場合は-1を返す                       |
| indexOf(String str, int fromIndex)      | int           | fromIndexから検索を開始し、strが最初に出現する位置のインデックスを返す |                                                |
|-----------------------------------------+---------------+------------------------------------------------------------------------+------------------------------------------------|
| capacity()                              | int           | 現在の容量を返す                                                       | デフォルトでは、16文字分のバッファを余分に持つ |
|-----------------------------------------+---------------+------------------------------------------------------------------------+------------------------------------------------|
